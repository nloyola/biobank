<?xml version="1.0" encoding="utf-8"?>
<project name="biobank" basedir="." default="deploy"
	 xmlns:flyway="antlib:com.googlecode.flyway.ant">
  <!--

      Overall build file
      use command "ant -projecthelp" to display the targets.

  -->

  <property environment="env" />
  <property name="doxygen" location="/usr/bin/doxygen" />
  <property name="xsltproc" location="/usr/bin/xsltproc" />

  <!-- TODO: move as many properties as possible into build.properties -->
  <!-- TODO: add tasks to push database properties to various files -->
  <!-- TODO: create a cacore directory with all the cacore stuff in it
       that we can throw into the war file and use to create the database -->
  <property file="build.properties" />
  <property file="client.properties" />
  <property file="db.properties" />

  <!-- must use a property with a LOCATION attribute because it is converted
       to be an absolute value, which the product builder seems to require in
       order to load its build.properties in product/build.properties -->
  <property name="product.dir" location="product" />
  <property name="buildDirectory" value="${product.dir}/buildDirectory" />

  <path id="flyway.lib.path">
    <fileset dir="${lib.dir}/flyway" includes="*.jar"/>
  </path>

  <path id="flyway.classpath">
    <fileset dir="${lib.dir}/build" includes="mysql-connector-java.jar"/>
    <fileset dir="${lib.dir}/flyway" includes="*.jar"/>
  </path>

  <import file="build-db.xml"/>
  <import file="build-i18n.xml"/>
  <import file="build-eclipse.xml"/>
  <import file="build-tests.xml"/>
  <import file="build-tools.xml"/>

  <condition property="databse.exec.haveUserAndPassword">
    <and>
      <isset property="database.exec.username" />
      <isset property="database.exec.password" />
    </and>
  </condition>

  <condition property="perl" value="perl" else="/usr/bin/perl">
    <os family="windows" />
  </condition>
  <condition property="debugFileExtension" value="-debug" else="">
    <equals arg1="${debug}" arg2="true" casesensitive="false" trim="true" />
  </condition>

  <fileset id="biobank.common.server.build.classpath" dir="${lib.dir}">
    <include name="csmapi-4.1.jar" />
    <include name="flyway-core-2.0.2.jar" />
    <include name="jta-1.1.jar" />
    <include name="sdk-core-4.1.1.jar" />
    <include name="sdk-writable-core-4.1.1.jar" />
    <include name="spiffy-all-0.55.jar" />
    <include name="supercsv-1.52.jar" />
    <include name="commons-lang-2.4.jar" />
  </fileset>

  <fileset id="biobank.common.client.build.classpath" dir="${lib.dir}">
    <include name="acegi-security-1.0.4.jar" />
    <include name="antlr-2.7.6.jar" />
    <include name="asm-1.5.3.jar" />
    <include name="axis-1.4.jar" />
    <include name="caGrid-CQL-cql-1.0-1.2.jar" />
    <include name="castor-1.0.2.jar" />
    <include name="cglib-2.1.3.jar" />
    <include name="cog-jglobus.jar" />
    <include name="commons-codec-1.3.jar" />
    <include name="commons-collections-3.2-1.jar" />
    <include name="commons-discovery-0.2.jar" />
    <include name="commons-lang-2.4.jar" />
    <include name="commons-logging-1.1.jar" />
    <include name="dom4j-1.4.jar" />
    <include name="ehcache-1.2.2.jar"/>
    <include name="gettext-commons-0.9.8.jar" />
    <include name="hibernate-commons-annotations.jar"/>
    <include name="hibernate-core-3.6.9.Final.jar" />
    <include name="hibernate-ehcache-3.6.9.Final.jar"/>
    <include name="hibernate-envers-3.6.9.Final.jar" />
    <include name="hibernate-jpa-2.0-api-1.0.1.Final.jar" />
    <include name="hibernate-validator-4.2.0.Final.jar" />
    <include name="javassist-3.12.0.GA.jar" />
    <include name="jaxrpc-1.1.jar" />
    <include name="jdom-1.1.jar"/>
    <include name="jsse1.6.0.jar" />
    <include name="jta-1.1.jar" />
    <include name="log4j-1.2.14.jar" />
    <include name="messages.jar" />
    <include name="mysql-connector-java-5.1.15.jar" />
    <include name="ognl-2.6.7.jar" />
    <include name="saaj-1.2.jar" />
    <include name="sdk-client-framework-4.1.1.jar" />
    <include name="sdk-grid-remoting-4.1.1.jar" />
    <include name="sdk-security-4.1.1.jar" />
    <include name="sdk-writable-client-framework-4.1.1.jar" />
    <include name="slf4j-api-1.6.4.jar" />
    <include name="slf4j-log4j12-1.6.4.jar" />
    <include name="spring-2.0.3.jar" />
    <include name="validation-api-1.0.0.GA.jar" />
    <include name="wsdl4j-1.5.1.jar" />
    <include name="xercesImpl-2.7.1.jar" />
    <include name="xpp3.jar" />
    <include name="xstream.jar" />
  </fileset>

  <path id="biobank.common.build.classpath">
    <fileset refid="biobank.common.server.build.classpath" />
    <fileset refid="biobank.common.client.build.classpath" />
  </path>

  <!-- for tests -->
  <path id="biobank.common.run.classpath">
    <fileset refid="biobank.common.server.build.classpath" />
    <fileset refid="biobank.common.client.build.classpath" />
    <pathelement location="${eclipse.proj.dir.common}/output" />
  </path>

  <target name="flyway-set-properties" depends="get-db-executor,build-common-project">
    <taskdef uri="antlib:com.googlecode.flyway.ant"
             resource="com/googlecode/flyway/ant/antlib.xml"
             classpathref="flyway.lib.path"
	     onerror="ignore" />

    <property name="flyway.driver" value="${database.driver}"/>
    <property name="flyway.url" value="${database.url}"/>
    <property name="flyway.user" value="${database.exec.username}"/>
    <property name="flyway.password" value="${database.exec.password}"/>
    <property name="flyway.schemas" value="${database.name}"/>
    <!--property name="flyway.locations"
	value="edu.ualberta.med.biobank.migration,db/migrations"/-->
    <property name="flyway.locations" value="edu.ualberta.med.biobank.migration,db/migrations"/>

    <copy file="${secu-log.dir}/jboss/flyway-application-config.xml.template"
	  tofile="${lib.dir}/flyway/flyway-application-config.xml"/>
    <replace file="${lib.dir}/flyway/flyway-application-config.xml">
      <replacefilter token="@database.url@" value="${database.url}"/>
      <replacefilter token="@database.driver@" value="${database.driver}"/>
      <replacefilter token="@database.username@" value="${database.username}"/>
      <replacefilter token="@database.password@" value="${database.password}"/>
    </replace>

    <jar destfile="${lib.dir}/flyway/migrations.jar"
	 basedir="."
	 includes="db/migration/**">
      <fileset dir="${eclipse.proj.dir.common}/output" includes="**/migration/*.class"/>
    </jar>
  </target>

  <target name="flyway-clean" depends="flyway-set-properties">
    <flyway:clean/>
  </target>

  <target name="flyway-info" depends="flyway-set-properties">
    <flyway:info/>
  </target>

  <target name="flyway-init" depends="flyway-set-properties">
    <flyway:init/>
  </target>

  <target name="flyway-migrate" depends="flyway-set-properties">
    <flyway:migrate/>
  </target>

  <target name="flyway-repair" depends="flyway-set-properties">
    <flyway:repair/>
  </target>

  <target name="flyway-validate" depends="flyway-set-properties">
    <flyway:validate/>
  </target>

  <target name="check-messages-jar-exists">
    <available file="${lib.dir}/messages.jar" property="messages-jar-exists" />
  </target>

  <target name="create-messages-jar" depends="check-messages-jar-exists"
	  unless="messages-jar-exists">
    <antcall target="messages-jar"/>
  </target>


  <target name="versions-update"
          depends="server-manifest,biobank-version-modify"
	  description="--> update version strings on server and client">
  </target>

  <target name="deploy-eclipse" depends="client-branding,create-messages-jar,biobank-version-modify"
	  description="--> retrieve dependencies for eclipse projects">
    <copy file="${lib.dir}/messages.jar" todir="${eclipse.proj.dir}/lib"/>
    <copy file="${lib.dir}/messages.jar" todir="${eclipse.proj.dir.common}/lib/client"/>

      <!-- File needed in the test project to call csm api methods -->
    <copy file="sdk_conf/biobank.csm.new.hibernate.cfg.xml" todir="${eclipse.proj.dir.tests}/src" />
  </target>

  <target name="get-db-executor" unless="databse.exec.haveUserAndPassword">
    <input message="Enter database executor's username (to execute database commands)"
           addProperty="database.exec.username"
           defaultValue="root" />
    <input message="Enter password"
           addProperty="database.exec.password"
           defaultValue="">
      <handler type="secure" />
    </input>
  </target>

  <target name="check-db-user"
          depends="check-db">
  </target>

  <target name="check-db"
          depends="get-db-executor">
  </target>

  <!-- JBoss -->
  <target name="check-jboss-uptodate">
    <!-- remove the upt.war because it requires db name/url/username/pw variables
         inside the war -->
    <delete includeemptydirs="true">
      <fileset dir="${env.JBOSS_HOME}/server/default/deploy">
        <include name="upt*.war"/>
      </fileset>
    </delete>
    <uptodate property="jboss.uptodate"
              targetfile="${env.JBOSS_HOME}/server/default/deploy/biobank.war">
      <srcfiles file="${war.file}" />
      <srcfiles file="db.properties" />
    </uptodate>
  </target>

  <target name="keystore-gen">
    <hostinfo prefix="local" />

    <echo message="Helping you to generate a TEMPORARY THROW-AWAY TEST key..." />
    <input message="Enter CN:"
           addproperty="dName.CN"
           defaultValue="localhost" />
    <input message="Enter subjectAltName:"
           addproperty="subjectAltName"
           defaultValue="IP:${local.ADDR4},DNS:localhost" />
    <input message="Enter an alias:"
           addproperty="keystore.alias"
           defaultValue="${dName.CN}" />

    <copy file="scripts/ssl/cert.cnf.template"
          tofile="scripts/ssl/cert.cnf" overwrite="true" />
    <replace file="scripts/ssl/cert.cnf">
      <replacefilter token="@@dName.CN@@" value="${dName.CN}" />
      <replacefilter token="@@subjectAltName@@" value="${subjectAltName}" />
    </replace>

    <exec executable="openssl" dir="scripts/ssl">
      <arg line="req -newkey rsa:2048 -x509 -outform DER -out cert.der -days 3650 -config cert.cnf" />
    </exec>
    <exec executable="openssl" dir="scripts/ssl">
      <arg line="pkcs8 -topk8 -nocrypt -in key.pem -inform PEM -out key.der -outform DER" />
    </exec>
    <exec executable="java" dir="scripts/ssl">
      <arg line="-Dkeystore=biobank.keystore ImportKey key.der cert.der ${keystore.alias}" />
    </exec>
    <exec executable="keytool" dir="scripts/ssl">
      <arg line="-keystore biobank.keystore -alias ${keystore.alias} -storepass importkey -keypasswd -keypass importkey -new biobank2" />
    </exec>
    <exec executable="keytool" dir="scripts/ssl">
      <arg line="-keystore biobank.keystore -storepasswd -storepass importkey -new biobank2" />
    </exec>
    <copy file="scripts/ssl/biobank.keystore"
          tofile="${secu-log.dir}/jboss/biobank.keystore"  overwrite="true" />
  </target>

  <target name="keystore-check">
    <available file="${secu-log.dir}/jboss/biobank.keystore" property="keystore.available" />
  </target>

  <target name="keystore-copy" depends="keystore-check">
    <fail unless="keystore.available"
          message="${secu-log.dir}/jboss/biobank.keystore not found. Use target 'keystore-gen' to generate a temporary key or create your own manually." />
    <copy file="${secu-log.dir}/jboss/biobank.keystore"
          tofile="${env.JBOSS_HOME}/server/default/conf/biobank.keystore"
          overwrite="true" />
  </target>

  <!-- version number on server side -->
  <target name="server-manifest">
    <manifest file="${eclipse.proj.dir.common}/META-INF/MANIFEST.MF"
              mode="update">
      <attribute name="Bundle-Version" value="${server.version.num}" />
    </manifest>
    <fixcrlf srcdir="${eclipse.proj.dir.common}/META-INF"
             eol="lf"
             eof="asis">
      <include name="**/*.MF" />
    </fixcrlf>
    <propertyfile file="${eclipse.proj.dir.common}/src/edu/ualberta/med/biobank/server/applicationservice/version.properties">
      <entry key="server.version" value="${server.version.num}" />
    </propertyfile>
  </target>

  <target name="update-db-config"
          description="copies db configuration information from db.properties to various config files">

    <copy todir="${secu-log.dir}/jboss" overwrite="true">
      <fileset dir="${secu-log.dir}/jboss">
	<exclude name="**/console/**" />
      </fileset>
      <globmapper from="*.template" to="*"/>
      <filterset>
        <filter token="database.url" value="${database.url}"/>
        <filter token="database.driver" value="${database.driver}"/>
        <filter token="database.username" value="${database.username}"/>
        <filter token="database.password" value="${database.password}"/>
      </filterset>
    </copy>
    <move file="${secu-log.dir}/jboss/application-config.xml"
          tofile="webapp/WEB-INF/classes/application-config.xml"
	  overwrite="true" />
    <move file="${secu-log.dir}/jboss/biobank.csm.new.hibernate.cfg.xml"
          tofile="webapp/WEB-INF/classes/biobank.csm.new.hibernate.cfg.xml"
	  overwrite="true" />
    <move file="${secu-log.dir}/jboss/log4j.xml"
          tofile="webapp/WEB-INF/classes/log4j.xml"
	  overwrite="true" />
  </target>

  <target name="check-db-properties">
    <available file="db.properties" property="db.properties.available" />
  </target>

  <target name="db-properties-copy" depends="check-db-properties">
    <fail unless="db.properties.available"
          message="File 'db.properties' not found in project's root directory. Copy 'db.properties.template' to 'db.properties' and modify accordingly." />
    <copy file="db.properties.template"
          tofile="db.properties"
          overwrite="false" />
  </target>

  <target name="jboss.home.env">
    <fail unless="env.JBOSS_HOME"
          message="JBOSS_HOME environment variable not defined" />
  </target>

  <target name="deploy-jboss"
          depends="jboss.home.env,update-db-config,package-webapp,check-jboss-uptodate,keystore-copy"
          description="deploys the caCORE SDK webapp to JBoss"
          unless="jboss.uptodate">
    <copy file="${secu-log.dir}/jboss/login-config.xml"
          tofile="${env.JBOSS_HOME}/server/default/conf/login-config.xml"
          overwrite="true" verbose="true" />
    <copy file="${secu-log.dir}/jboss/server${debugFileExtension}.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/jbossweb-tomcat55.sar/server.xml"
          overwrite="true" verbose="true" />
    <!-- for compatibility: this file has been split -->
    <delete file="${env.JBOSS_HOME}/server/default/deploy/mysql-ds.xml" />
    <copy file="${lib.dir}/mysql-connector-java-5.1.15.jar"
          tofile="${env.JBOSS_HOME}/server/default/lib/mysql-connector-java-5.1.15.jar"
          overwrite="true" verbose="true" />
    <copy file="${secu-log.dir}/jboss/upt-ds.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt-ds.xml"
          overwrite="true" verbose="true" />
    <copy file="${secu-log.dir}/jboss/biobank-ds.xml"
          tofile="${env.JBOSS_HOME}/server/default/deploy/biobank-ds.xml"
          overwrite="true" verbose="true" />
    <!-- ignore this war for now
    <copy file="${secu-log.dir}/jboss/upt.war"
          tofile="${env.JBOSS_HOME}/server/default/deploy/upt.war"
         overwrite="true" verbose="true" />
    -->
    <delete includeemptydirs="true">
      <fileset dir="${env.JBOSS_HOME}/server/default/deploy">
        <include name="upt*.war"/>
      </fileset>
    </delete>
    <copy file="${war.file}"
          tofile="${env.JBOSS_HOME}/server/default/deploy/biobank.war"
          overwrite="true" verbose="true"/>
  </target>

  <target name="build-eclipse-projects"
	  description="builds the Biobank client Eipse projects">
    <antcall target="eclipse-projects" />
  </target>

  <target name="deploy" description="deploys to JBoss and Eclipse project"
	  depends="deploy-eclipse,deploy-jboss">
  </target>

  <target name="build-common-project"
          depends="create-messages-jar,server-manifest">
    <copy file="${lib.dir}/messages.jar" todir="${eclipse.proj.dir.common}/lib/client" overwrite="true"/>
    <mkdir dir="${eclipse.proj.dir.common}/output" />
    <copy includeemptydirs="false" todir="${eclipse.proj.dir.common}/output" overwrite="false">
      <fileset dir="${eclipse.proj.dir.common}/src">
        <exclude name="**/*.launch" />
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <javac debug="true"
           debuglevel="source,lines,vars"
           srcdir="${eclipse.proj.dir.common}/src"
           destdir="${eclipse.proj.dir.common}/output"
           source="1.6"
           target="1.6"
           includeantruntime="false">
      <classpath refid="biobank.common.build.classpath" />
    </javac>
  </target>

  <target name="package-webapp" depends="build-common-project">
    <mkdir dir="${output.dir}" />
    <delete dir="webapp/db"/>
    <copy includeemptydirs="false" todir="webapp">
      <fileset dir=".">
        <include name="db/migration/*.sql" />
      </fileset>
    </copy>
    <war destfile="${war.file}"
         webxml="webapp/WEB-INF/web.xml">
      <manifest>
        <attribute name="Version" value="${server.version.num}" />
      </manifest>
      <lib dir="${req.jars.dir}">
        <include name="messages.jar" />
      </lib>
      <lib dir="${req.jars.dir}">
        <include name="*.jar" />
      </lib>
      <lib dir="${req.jars.dir}">
        <include name="flyway-core-2.0.2.jar" />
      </lib>
      <fileset dir="webapp">
        <exclude name="**/WEB-INF/**" />
      </fileset>
      <classes dir="${eclipse.proj.dir.common}/output">
        <exclude name="**/client/**" />
      </classes>
      <webinf dir="webapp/WEB-INF">
        <include name="**/*" />
	<exclude name="**/web.xml" />
      </webinf>
    </war>
  </target>

  <target name="clean-jars" description="deletes jars from eclipse projects">
    <delete>
      <fileset dir="${eclipse.proj.dir}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.mvp}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.gui.common}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.common}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.tests}/lib" includes="**/*.jar" />
      <fileset dir="${eclipse.proj.dir.tools}/lib" includes="**/*.jar" />
    </delete>
  </target>

  <target name="clean"
          depends="clean-tests,clean-tools,clean-jars,clean-product,clean-doxygen,clean-package-biobank-server"
          description="cleans project output, tests, and jars">
    <delete dir="${eclipse.proj.dir.common}/output" />
    <delete dir="${eclipse.proj.dir.tools}/output" />
    <delete dir="${lib.dir}/biobank.webapp" />
    <delete dir="${lib.dir}/hibernatetool" />
    <delete dir="${lib.dir}/build" />
    <delete dir="${lib.dir}/flyway" />
    <antcall target="clean-eclipse-projects" />
  </target>

  <property name="doxygen.output" location="docs/doxygen" />


  <target name="clean-product">
    <delete dir="${buildDirectory}" />
  </target>

  <condition property="client.branding.cbsr">
    <equals arg1="${client.branding}" arg2="cbsr" />
  </condition>

  <condition property="client.branding.stanford">
    <equals arg1="${client.branding}" arg2="stanford" />
  </condition>

  <target name="client-branding-cbsr" if="client.branding.cbsr">
    <copy file="branding/cbsr_splash.bmp"
          tofile="${eclipse.proj.dir}/splash.bmp" overwrite="true" />
  </target>

  <target name="client-branding-stanford" if="client.branding.stanford">
    <copy file="branding/stanford_splash.bmp"
          tofile="${eclipse.proj.dir}/splash.bmp" overwrite="true" />
  </target>

  <target name="client-branding" depends="client-branding-cbsr,client-branding-stanford">
    <fail message="Client branding is invalid: ${client.branding}">
      <condition>
	<and>
	  <not>
	    <isset property="client.branding.cbsr" />
	  </not>
	  <not>
	    <isset property="client.branding.stanford" />
	  </not>
	</and>
      </condition>
    </fail>
  </target>

  <target name="product"
	  depends="clean-product,versions-update,deploy,client-branding"
	  description="build the product">
    <!-- buildDirectory is the folder where the plugins and products are found and build -->
    <!-- plugins and features are copied into the buildDirectory -->
    <copy todir="${buildDirectory}/plugins/biobank2" verbose="true">
      <fileset dir="${eclipse.workspace.dir}/biobank2" />
    </copy>
    <!-- TODO : copy all project containing .nl1. into the plugins folder -->
    <copy todir="${buildDirectory}/plugins/biobank.nl1.fr_CA">
      <fileset dir="${eclipse.workspace.dir}/biobank.nl1.fr_CA" />
    </copy>
    <copy todir="${buildDirectory}/plugins/scannerConfig">
      <fileset dir="${eclipse.workspace.dir}/scannerConfig" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.common">
      <fileset dir="${eclipse.workspace.dir}/biobank.common" />
    </copy>
    <copy todir="${buildDirectory}/plugins/labelPrinter">
      <fileset dir="${eclipse.workspace.dir}/labelPrinter" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.gui.common">
      <fileset dir="${eclipse.workspace.dir}/biobank.gui.common" />
    </copy>
    <copy todir="${buildDirectory}/plugins/biobank.mvp">
      <fileset dir="${eclipse.workspace.dir}/biobank.mvp" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.core">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.core" />
    </copy>
    <copy todir="${buildDirectory}/features/biobank2.feature.platform">
      <fileset dir="${eclipse.workspace.dir}/biobank2.feature.platform" />
    </copy>
    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <!-- get current org.eclipse.pde.build folder. If find more than one, will use the last one in the list (should be the last version) -->
    <fileset id="pde.build.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.pde.build_*/scripts/productBuild/productBuild.xml" />
    <last id="pde.build.id" count="1">
      <fileset refid="pde.build.id.all" />
    </last>
    <!-- launch product creation -->
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.ant.core.antRunner" />
      <arg line="-buildfile ${toString:pde.build.id}" />
      <arg line="-Dbuilder=${product.dir}" />
      <!-- product.dir is used in product/customTarget.xml -->
      <arg line="-Dproduct.dir=${product.dir}" />
      <!-- instead of fixed paths in product/build.properties: -->
      <arg line="-Dproduct=${eclipse.proj.dir}/biobank2.product" />
      <arg line="-DbuildDirectory=${product.dir}/buildDirectory" />
      <arg line="-DbaseLocation=${env.ECLIPSE_HOME}" />
      <arg line="-Djava.client.version.num=${java.client.version.num}" />

      <!-- uncomment line below to build a single executable product -->
      <!-- arg line="-Dconfigs='win32, win32, x86'" / -->
      <!-- arg line="-Dconfigs='linux, gtk, x86_64'" / -->
    </java>
    <antcall target="updateSiteMetadata" />
  </target>


  <target name="updateSiteMetadata"
	  description="Build the update site folder">
    <property name="buildDirectory" value="${product.dir}/buildDirectory" />
    <property name="updateSiteFolder" value="${buildDirectory}/updateSite" />
    <copy todir="${updateSiteFolder}/features/">
      <fileset dir="${buildDirectory}/buildRepo/features/" />
    </copy>
    <copy todir="${updateSiteFolder}/plugins/">
      <fileset dir="${buildDirectory}/buildRepo/plugins/" />
    </copy>
    <fileset id="featureJar.id"
             dir="${updateSiteFolder}/features/"
             includes="biobank2.feature.core_*.jar" />
    <property name="featureJar" refid="featureJar.id" />
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${product.dir}/ant-contrib/ant-contrib-1.0b3.jar" />
      </classpath>
    </taskdef>
    <propertyregex property="featureVersion"
                   input="${featureJar}"
                   regexp="biobank2.feature.core_(.*)\.jar"
                   select="\1"
                   casesensitive="true" />
    <copy file="${product.dir}/site.xml"
          tofile="${updateSiteFolder}/site.xml" />
    <replace file="${updateSiteFolder}/site.xml"
             token="@VERSION@"
             value="${featureVersion}" />


    <!-- get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)-->
    <fileset id="launcher.id.all"
             dir="${env.ECLIPSE_HOME}/plugins/"
             includes="org.eclipse.equinox.launcher_*.jar" />
    <last id="launcher.id" count="1">
      <fileset refid="launcher.id.all" />
    </last>
    <java classpath="${toString:launcher.id}"
          classname="org.eclipse.equinox.launcher.Main"
          failonerror="true"
          fork="true">
      <arg line="-application org.eclipse.equinox.p2.publisher.UpdateSitePublisher" />
      <arg line="-source ${updateSiteFolder}" />
      <arg line="-compress" />
      <arg line="-publishArtifacts" />
      <arg line="-consoleLog" />
      <arg line="-artifactRepository file:${updateSiteFolder}" />
      <arg line="-metadataRepository file:${updateSiteFolder}" />
    </java>
  </target>

  <target name="doxygen" description="generates documentation for the model classes">
    <exec executable="${doxygen}">
      <arg value="docs/doxygen/doxygen.cfg" />
    </exec>
    <echo message="point your browser to: file://${doxygen.output}/html/index.html" />
    <exec executable="${xsltproc}" dir="docs/doxygen/xml" output="docs/doxygen/xml/all.xml">
      <arg value="combine.xslt" />
      <arg value="index.xml" />
    </exec>
  </target>

  <target name="clean-doxygen">
    <delete dir="docs/doxygen/html" />
    <delete dir="docs/doxygen/xml" />
  </target>

  <target name="clean-package-biobank-server">
    <delete dir="${package.jboss.target.dir}" />
    <delete dir="${package.jboss.root.dir}/templates" />
    <delete dir="${package.jboss.root.dir}/tools" />
    <delete file="biobank-server-*.deb"/>
  </target>

  <target name="package-biobank-server"
	  depends="deploy-jboss"
	  description="Generates an Ubuntu package file for the Biobank server.">

    <!-- Use command line unzip to keep file permissions -->
    <exec executable="unzip">
      <arg line="-q -o ${env.JBOSS_HOME}/../jboss-4.0.5.GA.zip -d ${package.jboss.root.dir}" />
    </exec>

    <copy file="${secu-log.dir}/jboss/overwrite/run.conf"
	  tofile="${package.jboss.target.dir}/bin/run.conf"
	  overwrite="true" verbose="true"/>

    <copy file="${secu-log.dir}/jboss/overwrite/server/default/conf/jboss-service.xml"
	  tofile="${package.jboss.target.dir}/server/default/conf/jboss-service.xml"
	  overwrite="true" verbose="true"/>

    <copy file="${secu-log.dir}/jboss/server.xml"
	  tofile="${package.jboss.target.dir}/server/default/deploy/jbossweb-tomcat55.sar/server.xml"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/overwrite/server/default/deploy/jmx-console.war/WEB-INF/jboss-web.xml"
	  tofile="${package.jboss.target.dir}/server/default/deploy/jmx-console.war/WEB-INF/jboss-web.xml"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/overwrite/server/default/deploy/jmx-console.war/WEB-INF/web.xml"
	  tofile="${package.jboss.target.dir}/server/default/deploy/jmx-console.war/WEB-INF/web.xml"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/overwrite/server/default/deploy/management/console-mgr.sar/web-console.war/WEB-INF/jboss-web.xml"
	  tofile="${package.jboss.target.dir}/server/default/deploy/management/console-mgr.sar/web-console.war/WEB-INF/jboss-web.xml"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/overwrite/server/default/deploy/management/console-mgr.sar/web-console.war/WEB-INF/web.xml"
	  tofile="${package.jboss.target.dir}/server/default/deploy/management/console-mgr.sar/web-console.war/WEB-INF/web.xml"
	  overwrite="true" />

    <mkdir dir="${package.jboss.root.dir}/tools"/>

    <copy file="${scripts.proj.dir}/ssl/ImportKey.class"
	  tofile="${package.jboss.root.dir}/tools/ImportKey.class"
	  overwrite="true" />

    <mkdir dir="${package.jboss.root.dir}/templates"/>

    <copy file="${secu-log.dir}/jboss/application-config.xml.template"
	  tofile="${package.jboss.root.dir}/templates/application-config.xml.template"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/biobank-ds.xml.template"
	  tofile="${package.jboss.root.dir}/templates/biobank-ds.xml.template"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/login-config.xml.template"
	  tofile="${package.jboss.root.dir}/templates/login-config.xml.template"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/log4j.xml.template"
	  tofile="${package.jboss.root.dir}/templates/log4j.xml.template"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/biobank.csm.new.hibernate.cfg.xml.template"
	  tofile="${package.jboss.root.dir}/templates/biobank.csm.new.hibernate.cfg.xml.template"
	  overwrite="true" />
    <copy file="${secu-log.dir}/jboss/upt-ds.xml.template"
	  tofile="${package.jboss.root.dir}/templates/upt-ds.xml.template"
	  overwrite="true" />

    <copy file="db/empty_db.sql.template"
	  tofile="${package.jboss.root.dir}/templates/empty_db.sql.template"
	  overwrite="true" />

    <copy file="${scripts.proj.dir}/ssl/cert.cnf.template"
	  tofile="${package.jboss.root.dir}/templates/cert.cnf.template"
	  overwrite="true" />


    <copy file="${secu-log.dir}/jboss/console/jmx-console-users.properties.template"
	  tofile="${package.jboss.root.dir}/templates/jmx-console-users.properties.template"
	  overwrite="true" />

    <copy file="${secu-log.dir}/jboss/console/web-console-users.properties.template"
 	  tofile="${package.jboss.root.dir}/templates/web-console-users.properties.template"
	  overwrite="true" />

    <copy file="${war.file}"
	  tofile="${package.jboss.target.dir}/server/default/deploy/biobank.war"
	  overwrite="true" />

    <copy file="${war.file}"
	  tofile="${package.jboss.target.dir}/server/default/deploy/biobank.war"
	  overwrite="true" />

    <copy file="${lib.dir}/build/mysql-connector-java.jar"
          tofile="${package.jboss.target.dir}/server/default/lib/mysql-connector-java.jar"
          overwrite="true" verbose="true" />

    <exec executable="dpkg" dir="package-jboss">
      <arg line="--build debian" />
    </exec>

    <move file="package-jboss/debian.deb"
	  tofile="biobank-server-${server.version.num}.deb"
	  overwrite="true" />

  </target>

</project>
